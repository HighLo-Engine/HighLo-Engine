#pragma once

layout(std140, binding = 0) uniform Camera
{
	mat4 ViewProjectionMatrix;
	mat4 InverseViewProjectionMatrix;
	mat4 ProjectionMatrix;
	mat4 InverseProjectionMatrix;
	mat4 ViewMatrix;
	mat4 InverseViewMatrix;
	vec2 NDCToViewMul;
	vec2 NDCToViewAdd;
	vec2 DepthUnpackConsts;
	vec2 CameraTanHalfFOV;
} u_Camera;

layout(std140, binding = 17) uniform ScreenData
{
	vec2 InvFullResolution;
	vec2 FullResolution;
	vec2 InvHalfResolution;
	vec2 HalfResolution;
} u_ScreenData;

layout(std140, binding = 3) uniform RendererData
{
	vec4 CascadeSplits;
	float LightSize;
	float MaxShadowDistance;
	float ShadowFade;
	float CascadeTransitionFade;
	int TilesCountX;
	int ShowLightComplexity;
	int ShowCascades;
	int SoftShadows;
	int CascadeFading;
} u_RendererData;

layout(std140, binding = 18) uniform HBAOData
{
	vec4 Float2Offsets[16];
	vec4 Jitters[16];
	vec4 PerspectiveInfo;
	float RadiusToScreen;
	float NegInvR2;
	float NDotVBias;
	float AOMultiplier;
	float PowExponent;
	vec3 Padding1;
	float ShadowTolerance;
	vec2 InvQuarterResolution;
	vec2 Padding2;
	bool IsOrtho;
} u_HBAO;

layout(std430, binding = 14) buffer VisiblePointLightIndicesBuffer
{
	int Indices[];
} s_VisiblePointLightIndicesBuffer;

layout(std140, binding = 1) uniform ShadowData
{
	mat4 DirLightMatrices[4];
} u_DirShadow;

struct DirectionalLight
{
	vec3 Direction;
	float ShadowAmount;
	vec3 Radiance;
	float Multiplier;
};

struct PointLight
{
	vec3 Position;
	float Multiplier;
	vec3 Radiance;
	float MinRadius;
	float Radius;
	float Falloff;
	float LightSize;
	bool CastsShadows;
};

layout(std140, binding = 2) uniform SceneData
{
	DirectionalLight DirectionalLights;
	vec3 CameraPosition;
	float EnvironmentMapIntensity;
} u_Scene;

layout(std140, binding = 4) uniform PointLightData
{
	uint LightCount;
	PointLight Lights[1000];
} u_PointLights;

struct PBRParameters
{
	vec3 Diffuse;
	float Roughness;
	float Metalness;

	vec3 Normal;
	vec3 View;
	float NdotV;
} m_Params;

